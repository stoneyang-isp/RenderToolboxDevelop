%% Build a standalone executable version of the RecipeExecutor m-function.
%   mainFunction which function to compile (default is ./RecipeExecutor.m)
%   buildFolder where to write build output (default is GetUserFolder()/RecipeExecutor)
%   zipFile where to write a zip of the output folder (if you want)
%   include cell array of extra files or folders to add to the standalone
%
% @details
% Build a standalone executable version of the RecipeExecutor or similar
% function.  This script is based on the mcc() command generated by the the
% Matlab % applicationCompiler() function.  It generalizes the mcc()
% command somewhat by breaking out the arguments above.
%
% @details
% It also makes it easier to re-run mcc() from the command line.  The
% default behavior of applicationCompiler() is to run on a background
% thread, which makes it hard to write scripts that include it.
%
% @details
% @a mainFunction is the top-level m-function that you want to run as a
% portable, standalone executable.  It should probably be RecipeExecutor.m.
%
% @details
% @a buildFolder is a folder to hold build products.  The default is inside
% your user folder.  See GetUserFolder().
%
% @details
% @a zipFile is the name of a zip archive that should contain the build
% products.  Leave this empty if you don't want a zip archive.
%
% @details
% @a include is a cell array of extra files or folders to be included or
% "baked in" to the standalone executable.  Even if you leave this empty, a
% default set of files suitable for RecipeExecutor will be included.
%
% @details
% Usage:
%
function BuildRecipeExecutor(mainFunction, buildFolder, zipFile, include)

if nargin < 1 || isempty(mainFunction)
    mainFunction = which('RecipeExecutor');
end

[mainPath, mainBase, mainExt] = fileparts(mainFunction);

if nargin < 2 || isempty(buildFolder)
    buildFolder = fullfile(GetUserFolder(), 'build', mainBase);
end

if nargin < 3 || isempty(zipFile)
    zipFile = '';
end

if nargin < 4 || isempty(include)
    include = {};
end

%% Choose basic arguments for mcc().
outputFile = mainBase;
wrapper = ['main:' mainBase];
targetStage = 'link:exe';
outputFolder = buildFolder;
runtime = ['''-logfile,' mainBase '.log'''];

%% Build list of default include files and folders.
ptbRoot = PsychtoolboxRoot();
rtbRoot = RenderToolboxRoot();
vsRoot = VirtualScenesRoot();

defaultInclude = { ...
    %fullfile(ptbRoot, 'PsychCal'), ...
    fullfile(ptbRoot, 'PsychColorimetric'), ...
    fullfile(ptbRoot, 'PsychOneliners'), ...
    fullfile(rtbRoot, 'Admin'), ...
    fullfile(rtbRoot, 'BatchRenderer'), ...
    fullfile(rtbRoot, 'RecipeAPI'), ...
    fullfile(rtbRoot, 'RemodelerPlugins'), ...
    fullfile(rtbRoot, 'RenderData'), ...
    fullfile(rtbRoot, 'RendererPlugins'), ...
    fullfile(rtbRoot, 'SceneDOM'), ...
    fullfile(rtbRoot, 'Utilities'), ...
    fullfile(vsRoot, 'Examples', 'Standalone', 'RecipeExecutorConfig.m'), ...
    fullfile(vsRoot, 'MiscellaneousData'), ...
    fullfile(vsRoot, 'ModelRepository'), ...
    fullfile(vsRoot, 'Remodelers'), ...
    fullfile(vsRoot, 'Utilities'), ...
    'userpath.m'
    };

%% Build a string of include "-a" arguments for mcc().
allInclude = cat(2, defaultInclude, include);
addToArchive = sprintf('-a %s ', allInclude{:});

%% Build the actual mcc() command.
mccCommand = [ ...
    'mcc ' ...
    '-o ' outputFile ' ' ...
    '-W ' wrapper ' ' ...
    '-T ' targetStage ' ' ...
    '-d ' outputFolder ' ' ...
    '-R ' runtime ' ' ...
    '-v ' ...
    mainFunction ' '...
    addToArchive ...
    ];

%% Invoke mcc() and build the standalone executable.
if ~exist(outputFolder, 'dir')
    mkdir(outputFolder);
end

disp(['Starting mcc() at ' datestr(now)])
tic();
disp(mccCommand);
eval(mccCommand);
toc();

%% Pack up the build products in a zip archive.
if (~isempty(zipFile))
    disp(['Making zip archive: ' zipFile])
    zip(zipFile, outputFolder)
end